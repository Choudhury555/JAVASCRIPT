<!-- Mixins & Composition over Inheritance -->

<!-- The Problem with Deep Inheritance -->
-Inheritance works well in small hierarchies.
-But too many layers (multi-level, diamond inheritance) become messy.
-Example: Should FlyingFish extend Fish or Bird?

<!-- What is a Mixin? -->
-A mixin is a reusable piece of code (object or function) that adds methods to a class.
-Allows multiple behaviors to be combined without strict inheritance.

<!-- Function-Based Mixins -->
-Safer than Object.assign, avoids name collisions.

<!-- Composition over Inheritance -->
-Instead of deep inheritance, compose small behaviors.
-composition over inheritance â€” a design principle where you build objects by combining simple, reusable behaviors instead of using class inheritance.